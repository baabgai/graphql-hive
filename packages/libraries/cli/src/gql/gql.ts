/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query fetchLatestVersion {\n    latestValidVersion {\n      sdl\n    }\n  }\n": types.FetchLatestVersionDocument,
    "\n  mutation schemaCheck($input: SchemaCheckInput!, $usesGitHubApp: Boolean!) {\n    schemaCheck(input: $input) {\n      __typename\n      ... on SchemaCheckSuccess @skip(if: $usesGitHubApp) {\n        valid\n        initial\n        warnings {\n          nodes {\n            message\n            source\n            line\n            column\n          }\n          total\n        }\n        changes {\n          nodes {\n            message\n            criticality\n          }\n          total\n        }\n        schemaCheck {\n          webUrl\n        }\n      }\n      ... on SchemaCheckError @skip(if: $usesGitHubApp) {\n        valid\n        changes {\n          nodes {\n            message\n            criticality\n          }\n          total\n        }\n        warnings {\n          nodes {\n            message\n            source\n            line\n            column\n          }\n          total\n        }\n        errors {\n          nodes {\n            message\n          }\n          total\n        }\n        schemaCheck {\n          webUrl\n        }\n      }\n      ... on GitHubSchemaCheckSuccess @include(if: $usesGitHubApp) {\n        message\n      }\n      ... on GitHubSchemaCheckError @include(if: $usesGitHubApp) {\n        message\n      }\n    }\n  }\n": types.SchemaCheckDocument,
    "\n  mutation schemaDelete($input: SchemaDeleteInput!) {\n    schemaDelete(input: $input) {\n      __typename\n      ... on SchemaDeleteSuccess {\n        valid\n        changes {\n          nodes {\n            criticality\n            message\n          }\n          total\n        }\n        errors {\n          nodes {\n            message\n          }\n          total\n        }\n      }\n      ... on SchemaDeleteError {\n        valid\n        errors {\n          nodes {\n            message\n          }\n          total\n        }\n      }\n    }\n  }\n": types.SchemaDeleteDocument,
    "\n  mutation schemaPublish($input: SchemaPublishInput!, $usesGitHubApp: Boolean!) {\n    schemaPublish(input: $input) {\n      __typename\n      ... on SchemaPublishSuccess @skip(if: $usesGitHubApp) {\n        initial\n        valid\n        successMessage: message\n        linkToWebsite\n        changes {\n          nodes {\n            message\n            criticality\n          }\n          total\n        }\n      }\n      ... on SchemaPublishError @skip(if: $usesGitHubApp) {\n        valid\n        linkToWebsite\n        changes {\n          nodes {\n            message\n            criticality\n          }\n          total\n        }\n        errors {\n          nodes {\n            message\n          }\n          total\n        }\n      }\n      ... on SchemaPublishMissingServiceError @skip(if: $usesGitHubApp) {\n        missingServiceError: message\n      }\n      ... on SchemaPublishMissingUrlError @skip(if: $usesGitHubApp) {\n        missingUrlError: message\n      }\n      ... on GitHubSchemaPublishSuccess @include(if: $usesGitHubApp) {\n        message\n      }\n      ... on GitHubSchemaPublishError @include(if: $usesGitHubApp) {\n        message\n      }\n    }\n  }\n": types.SchemaPublishDocument,
    "\n  query myTokenInfo {\n    tokenInfo {\n      __typename\n      ... on TokenInfo {\n        token {\n          name\n        }\n        organization {\n          name\n          cleanId\n        }\n        project {\n          name\n          type\n          cleanId\n        }\n        target {\n          name\n          cleanId\n        }\n        canPublishSchema: hasTargetScope(scope: REGISTRY_WRITE)\n        canCheckSchema: hasTargetScope(scope: REGISTRY_READ)\n        canPublishOperations: hasProjectScope(scope: OPERATIONS_STORE_WRITE)\n      }\n      ... on TokenNotFoundError {\n        message\n      }\n    }\n  }\n": types.MyTokenInfoDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchLatestVersion {\n    latestValidVersion {\n      sdl\n    }\n  }\n"): (typeof documents)["\n  query fetchLatestVersion {\n    latestValidVersion {\n      sdl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation schemaCheck($input: SchemaCheckInput!, $usesGitHubApp: Boolean!) {\n    schemaCheck(input: $input) {\n      __typename\n      ... on SchemaCheckSuccess @skip(if: $usesGitHubApp) {\n        valid\n        initial\n        warnings {\n          nodes {\n            message\n            source\n            line\n            column\n          }\n          total\n        }\n        changes {\n          nodes {\n            message\n            criticality\n          }\n          total\n        }\n        schemaCheck {\n          webUrl\n        }\n      }\n      ... on SchemaCheckError @skip(if: $usesGitHubApp) {\n        valid\n        changes {\n          nodes {\n            message\n            criticality\n          }\n          total\n        }\n        warnings {\n          nodes {\n            message\n            source\n            line\n            column\n          }\n          total\n        }\n        errors {\n          nodes {\n            message\n          }\n          total\n        }\n        schemaCheck {\n          webUrl\n        }\n      }\n      ... on GitHubSchemaCheckSuccess @include(if: $usesGitHubApp) {\n        message\n      }\n      ... on GitHubSchemaCheckError @include(if: $usesGitHubApp) {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation schemaCheck($input: SchemaCheckInput!, $usesGitHubApp: Boolean!) {\n    schemaCheck(input: $input) {\n      __typename\n      ... on SchemaCheckSuccess @skip(if: $usesGitHubApp) {\n        valid\n        initial\n        warnings {\n          nodes {\n            message\n            source\n            line\n            column\n          }\n          total\n        }\n        changes {\n          nodes {\n            message\n            criticality\n          }\n          total\n        }\n        schemaCheck {\n          webUrl\n        }\n      }\n      ... on SchemaCheckError @skip(if: $usesGitHubApp) {\n        valid\n        changes {\n          nodes {\n            message\n            criticality\n          }\n          total\n        }\n        warnings {\n          nodes {\n            message\n            source\n            line\n            column\n          }\n          total\n        }\n        errors {\n          nodes {\n            message\n          }\n          total\n        }\n        schemaCheck {\n          webUrl\n        }\n      }\n      ... on GitHubSchemaCheckSuccess @include(if: $usesGitHubApp) {\n        message\n      }\n      ... on GitHubSchemaCheckError @include(if: $usesGitHubApp) {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation schemaDelete($input: SchemaDeleteInput!) {\n    schemaDelete(input: $input) {\n      __typename\n      ... on SchemaDeleteSuccess {\n        valid\n        changes {\n          nodes {\n            criticality\n            message\n          }\n          total\n        }\n        errors {\n          nodes {\n            message\n          }\n          total\n        }\n      }\n      ... on SchemaDeleteError {\n        valid\n        errors {\n          nodes {\n            message\n          }\n          total\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation schemaDelete($input: SchemaDeleteInput!) {\n    schemaDelete(input: $input) {\n      __typename\n      ... on SchemaDeleteSuccess {\n        valid\n        changes {\n          nodes {\n            criticality\n            message\n          }\n          total\n        }\n        errors {\n          nodes {\n            message\n          }\n          total\n        }\n      }\n      ... on SchemaDeleteError {\n        valid\n        errors {\n          nodes {\n            message\n          }\n          total\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation schemaPublish($input: SchemaPublishInput!, $usesGitHubApp: Boolean!) {\n    schemaPublish(input: $input) {\n      __typename\n      ... on SchemaPublishSuccess @skip(if: $usesGitHubApp) {\n        initial\n        valid\n        successMessage: message\n        linkToWebsite\n        changes {\n          nodes {\n            message\n            criticality\n          }\n          total\n        }\n      }\n      ... on SchemaPublishError @skip(if: $usesGitHubApp) {\n        valid\n        linkToWebsite\n        changes {\n          nodes {\n            message\n            criticality\n          }\n          total\n        }\n        errors {\n          nodes {\n            message\n          }\n          total\n        }\n      }\n      ... on SchemaPublishMissingServiceError @skip(if: $usesGitHubApp) {\n        missingServiceError: message\n      }\n      ... on SchemaPublishMissingUrlError @skip(if: $usesGitHubApp) {\n        missingUrlError: message\n      }\n      ... on GitHubSchemaPublishSuccess @include(if: $usesGitHubApp) {\n        message\n      }\n      ... on GitHubSchemaPublishError @include(if: $usesGitHubApp) {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation schemaPublish($input: SchemaPublishInput!, $usesGitHubApp: Boolean!) {\n    schemaPublish(input: $input) {\n      __typename\n      ... on SchemaPublishSuccess @skip(if: $usesGitHubApp) {\n        initial\n        valid\n        successMessage: message\n        linkToWebsite\n        changes {\n          nodes {\n            message\n            criticality\n          }\n          total\n        }\n      }\n      ... on SchemaPublishError @skip(if: $usesGitHubApp) {\n        valid\n        linkToWebsite\n        changes {\n          nodes {\n            message\n            criticality\n          }\n          total\n        }\n        errors {\n          nodes {\n            message\n          }\n          total\n        }\n      }\n      ... on SchemaPublishMissingServiceError @skip(if: $usesGitHubApp) {\n        missingServiceError: message\n      }\n      ... on SchemaPublishMissingUrlError @skip(if: $usesGitHubApp) {\n        missingUrlError: message\n      }\n      ... on GitHubSchemaPublishSuccess @include(if: $usesGitHubApp) {\n        message\n      }\n      ... on GitHubSchemaPublishError @include(if: $usesGitHubApp) {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query myTokenInfo {\n    tokenInfo {\n      __typename\n      ... on TokenInfo {\n        token {\n          name\n        }\n        organization {\n          name\n          cleanId\n        }\n        project {\n          name\n          type\n          cleanId\n        }\n        target {\n          name\n          cleanId\n        }\n        canPublishSchema: hasTargetScope(scope: REGISTRY_WRITE)\n        canCheckSchema: hasTargetScope(scope: REGISTRY_READ)\n        canPublishOperations: hasProjectScope(scope: OPERATIONS_STORE_WRITE)\n      }\n      ... on TokenNotFoundError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  query myTokenInfo {\n    tokenInfo {\n      __typename\n      ... on TokenInfo {\n        token {\n          name\n        }\n        organization {\n          name\n          cleanId\n        }\n        project {\n          name\n          type\n          cleanId\n        }\n        target {\n          name\n          cleanId\n        }\n        canPublishSchema: hasTargetScope(scope: REGISTRY_WRITE)\n        canCheckSchema: hasTargetScope(scope: REGISTRY_READ)\n        canPublishOperations: hasProjectScope(scope: OPERATIONS_STORE_WRITE)\n      }\n      ... on TokenNotFoundError {\n        message\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;